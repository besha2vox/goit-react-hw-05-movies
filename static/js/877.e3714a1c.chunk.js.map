{"version":3,"file":"static/js/877.e3714a1c.chunk.js","mappings":"gNAEMA,EAAAA,WACJ,cAAe,eACbC,KAAKC,cAAgB,KACrBD,KAAKE,SAAW,gCAChBF,KAAKG,QAAU,kCAChB,CA2DA,OA3DA,qEAED,WAAiBC,EAAKC,GAAtB,kFACeC,EAAAA,EAAAA,GAAMF,EAAK,CACtBG,QAASP,KAAKE,SACdM,QAAO,QACLC,QAAST,KAAKG,SACbE,EAAQL,KAAKU,gBALpB,6IAFC,IAED,kEAUA,oFACc,qBADd,SAGeV,KAAKW,WAFN,sBADd,0IAVA,IAUA,oEAMA,WAA0BC,GAA1B,8EACQR,EADR,gBACuBQ,GADvB,SAGeZ,KAAKW,WAAWP,GAH/B,2IANA,IAMA,uEAMA,WAA6BQ,GAA7B,8EACQR,EADR,gBACuBQ,EADvB,qBAGeZ,KAAKW,WAAWP,GAH/B,2IANA,IAMA,sEAMA,WAA4BQ,GAA5B,8EACQR,EADR,gBACuBQ,EADvB,qBAGeZ,KAAKW,WAAWP,GAH/B,2IANA,IAMA,mEAMA,oFACc,eADd,SAGeJ,KAAKW,WAFN,eAEsB,SAHpC,0IANA,IAMA,wBAiBA,WACE,OAAOX,KAAKC,aACb,MAED,SAAiBY,GACfb,KAAKC,cAAgBY,CACtB,OAhEGd,GAmEAe,EAAM,IAAIf,EAEhB,K,yMC/DMgB,EAAWC,EAAAA,GAAAA,GAAH,8BACVC,EAAAA,IAkDJ,EA/Ca,WACX,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0CF,EAAAA,EAAAA,WAAS,GAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAsBR,OApBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,sGACOZ,EAAAA,EAAAA,uBAA2BS,GADlC,gBACRI,EADQ,EACRA,KAERP,EACEO,EAAKC,KAAKC,KAAI,gBAAGjB,EAAH,EAAGA,GAAIkB,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,aAAxB,MAA4C,CACxDpB,GAAAA,EACAkB,UAAAA,EACAC,KAAAA,EACAE,QAASD,EAAY,6CACqBA,GACtC,8HANQ,KAShBV,GAAiB,GAbD,2CAAH,qDAgBfI,GACD,GAAE,CAACH,KAGF,kCACKJ,EAAOe,SACR,SAAC,IAAD,UACGf,EAAOU,KAAI,gBAAGjB,EAAH,EAAGA,GAAIkB,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAME,EAAxB,EAAwBA,QAAxB,OACV,UAAClB,EAAD,YACE,gBAAKoB,IAAKF,EAASG,IAAKL,KACxB,4BACE,uBAAIA,KACJ,uCAAeD,UAJJlB,EADL,MAWfS,IAAkBF,EAAOe,SACxB,SAACG,EAAA,QAAD,CAASC,KAAK,+BAIrB,C,mFCvDKC,E,QAAcvB,GAAAA,EAAH,wF,4BCCXqB,EAAU,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjB,OAAO,SAACC,EAAD,UAAcD,GACtB,EAED,IAEAD,EAAQG,SAAW,CACjBF,KAAMG,IAAAA,OAAAA,W,sECRFC,E,QAAO1B,GAAAA,GAAH,+H,+ICCJC,GAAa0B,EAAAA,EAAAA,IAAH,udAwBVC,EAAO5B,EAAAA,GAAAA,GAAH,8BACNC,GAGE4B,GAAW7B,EAAAA,EAAAA,IAAO8B,EAAAA,GAAP9B,CAAH,6G","sources":["API/API.js","components/Cast/Cast.jsx","components/Message/Message.styled.jsx","components/Message/Message.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesListItem/MoviesListItem.styled.jsx"],"sourcesContent":["import axios from 'axios';\n\nclass API {\n  constructor() {\n    this._queryToFetch = null;\n    this.BASE_URL = 'https://api.themoviedb.org/3/';\n    this.API_KEY = '9cca312caffd11f4ae9f11244d585025';\n  }\n\n  async basicFetch(url, query) {\n    return await axios(url, {\n      baseURL: this.BASE_URL,\n      params: {\n        api_key: this.API_KEY,\n        [query]: this.queryToFetch,\n      },\n    });\n  }\n\n  async getTrendingMovies() {\n    const url = 'trending/movie/day';\n\n    return await this.basicFetch(url);\n  }\n\n  async getSearchMoviesByID(id) {\n    const url = `movie/${id}`;\n\n    return await this.basicFetch(url);\n  }\n\n  async getSearchMoviesCredits(id) {\n    const url = `movie/${id}/credits`;\n\n    return await this.basicFetch(url);\n  }\n\n  async getSearchMoviesReview(id) {\n    const url = `movie/${id}/reviews`;\n\n    return await this.basicFetch(url);\n  }\n\n  async getMoviesByKeyWord() {\n    const url = 'search/movie';\n\n    return await this.basicFetch(url, 'query');\n\n    // const params = new URLSearchParams({\n    //   api_key: this.API_KEY,\n\n    //   query: this._queryToFetch,\n    //   page: this.pageToFetch,\n    // });\n\n    // const url = `${this.BASE_URL}search/movie?${params.toString()}`;\n\n    // return await this.basicFetch(url);\n  }\n\n  get queryToFetch() {\n    return this._queryToFetch;\n  }\n\n  set queryToFetch(keyword) {\n    this._queryToFetch = keyword;\n  }\n}\n\nconst api = new API();\n\nexport default api;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from 'API/API';\nimport { List } from 'components/MoviesList/MoviesList.styled';\nimport styled from 'styled-components';\nimport { itemStyles } from 'components/MoviesList/MoviesListItem/MoviesListItem.styled';\nimport Message from 'components/Message';\n\nconst CastItem = styled.li`\n  ${itemStyles}\n`;\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const [isCastFetched, setIsCastFetched] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getActors = async () => {\n      const { data } = await api.getSearchMoviesCredits(movieId);\n\n      setActors(\n        data.cast.map(({ id, character, name, profile_path }) => ({\n          id,\n          character,\n          name,\n          profile: profile_path\n            ? `https://image.tmdb.org/t/p/original${profile_path}`\n            : 'https://st2.depositphotos.com/1009634/7235/v/950/depositphotos_72350117-stock-illustration-no-user-profile-picture-hand.jpg',\n        }))\n      );\n      setIsCastFetched(true);\n    };\n\n    getActors();\n  }, [movieId]);\n\n  return (\n    <>\n      {!!actors.length && (\n        <List>\n          {actors.map(({ id, character, name, profile }) => (\n            <CastItem key={id}>\n              <img src={profile} alt={name} />\n              <div>\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </div>\n            </CastItem>\n          ))}\n        </List>\n      )}\n      {isCastFetched && !actors.length && (\n        <Message text=\"Cast of actors not found\" />\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nconst Discription = styled.p`\n  text-align: center;\n  font-size: 28px;\n  font-weight: 700;\n`;\n\nexport { Discription };\n","import { Discription } from './Message.styled';\nimport PropType from 'prop-types';\n\nconst Message = ({ text }) => {\n  return <Discription>{text}</Discription>;\n};\n\nexport default Message;\n\nMessage.propType = {\n  text: PropType.string.isRequired,\n};\n","import styled from 'styled-components';\n\nconst List = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 250px);\n  gap: 16px;\n`;\n\nexport { List };\n","import styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst itemStyles = css`\n  display: flex;\n  flex-direction: column;\n  cursor: pointer;\n  background-color: #ffffff;\n  transition: box-shadow 300ms ease-in-out, transform 300ms ease-in-out;\n  border: 1px solid #2e2e2e70;\n  border-radius: 10px;\n  overflow: hidden;\n\n  & img {\n    object-fit: cover;\n    min-height: 400px;\n  }\n\n  & div {\n    padding: 4px;\n    display: inherit;\n    flex-direction: column;\n    justify-content: end;\n    flex-grow: 1;\n  }\n`;\n\nconst Item = styled.li`\n  ${itemStyles}\n`;\n\nconst ItemLink = styled(Link)`\n  &:hover {\n    box-shadow: 0 0 3px 2px #db8f2cac;\n    transform: scale(1.2);\n  }\n`;\n\nexport { ItemLink, itemStyles, Item };\n"],"names":["API","this","_queryToFetch","BASE_URL","API_KEY","url","query","axios","baseURL","params","api_key","queryToFetch","basicFetch","id","keyword","api","CastItem","styled","itemStyles","useState","actors","setActors","isCastFetched","setIsCastFetched","movieId","useParams","useEffect","getActors","data","cast","map","character","name","profile_path","profile","length","src","alt","Message","text","Discription","propType","PropType","List","css","Item","ItemLink","Link"],"sourceRoot":""}