{"version":3,"file":"static/js/244.89a9621f.chunk.js","mappings":"oNAEMA,EAAAA,WACJ,cAAe,eACbC,KAAKC,cAAgB,KACrBD,KAAKE,SAAW,gCAChBF,KAAKG,QAAU,kCAChB,CA2DA,OA3DA,qEAED,WAAiBC,EAAKC,GAAtB,kFACeC,EAAAA,EAAAA,GAAMF,EAAK,CACtBG,QAASP,KAAKE,SACdM,QAAO,QACLC,QAAST,KAAKG,SACbE,EAAQL,KAAKU,gBALpB,6IAFC,IAED,kEAUA,oFACc,qBADd,SAGeV,KAAKW,WAFN,sBADd,0IAVA,IAUA,oEAMA,WAA0BC,GAA1B,8EACQR,EADR,gBACuBQ,GADvB,SAGeZ,KAAKW,WAAWP,GAH/B,2IANA,IAMA,uEAMA,WAA6BQ,GAA7B,8EACQR,EADR,gBACuBQ,EADvB,qBAGeZ,KAAKW,WAAWP,GAH/B,2IANA,IAMA,sEAMA,WAA4BQ,GAA5B,8EACQR,EADR,gBACuBQ,EADvB,qBAGeZ,KAAKW,WAAWP,GAH/B,2IANA,IAMA,mEAMA,oFACc,eADd,SAGeJ,KAAKW,WAFN,eAEsB,SAHpC,0IANA,IAMA,wBAiBA,WACE,OAAOX,KAAKC,aACb,MAED,SAAiBY,GACfb,KAAKC,cAAgBY,CACtB,OAhEGd,GAmEAe,EAAM,IAAIf,EAEhB,K,mFCrEMgB,E,QAAcC,GAAAA,EAAH,wF,SCIjB,EAJqB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACtB,OAAO,SAACF,EAAD,UAAcE,GACtB,C,sICFKC,EAAcF,EAAAA,GAAAA,GAAH,mFAMXG,EAAcH,EAAAA,GAAAA,GAAH,kmB,iDCgDjB,EAlDgB,WACd,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAyBR,OAvBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,sGACMZ,EAAAA,EAAAA,sBAA0BS,GADhC,gBACTI,EADS,EACTA,KACRC,QAAQC,IAAI,cAAeF,GAE3BL,EACEK,EAAKG,QAAQC,KACX,gBAAGnB,EAAH,EAAGA,GAAIoB,EAAP,EAAOA,OAA0BC,EAAjC,EAAeC,eAAkBD,YAAjC,MAA+D,CAC7DrB,GAAAA,EACAoB,OAAAA,EACAG,QAHF,EAAgDA,QAI9CC,OACEH,IAAgBA,EAAYI,SAAS,QAArC,6CAC0CJ,GACtC,8HAPR,KANa,2CAAH,qDAmBhBP,GACD,GAAE,CAACH,KAGF,8BACKF,EAAQiB,QACT,SAACpB,EAAD,UACGG,EAAQU,KAAI,gBAAGnB,EAAH,EAAGA,GAAIoB,EAAP,EAAOA,OAAQG,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,OAAxB,OACX,UAACjB,EAAD,YACE,4BACE,gBAAKoB,IAAKH,EAAQI,IAAKR,KACvB,qCAAaA,SAEf,qCACU,0BAAOG,SANDvB,EADP,OAaf,SAAC6B,EAAA,QAAD,CAASxB,KAAK,0BAIrB,C","sources":["API/API.js","components/Message/Message.styled.jsx","components/Message/Message.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nclass API {\n  constructor() {\n    this._queryToFetch = null;\n    this.BASE_URL = 'https://api.themoviedb.org/3/';\n    this.API_KEY = '9cca312caffd11f4ae9f11244d585025';\n  }\n\n  async basicFetch(url, query) {\n    return await axios(url, {\n      baseURL: this.BASE_URL,\n      params: {\n        api_key: this.API_KEY,\n        [query]: this.queryToFetch,\n      },\n    });\n  }\n\n  async getTrendingMovies() {\n    const url = 'trending/movie/day';\n\n    return await this.basicFetch(url);\n  }\n\n  async getSearchMoviesByID(id) {\n    const url = `movie/${id}`;\n\n    return await this.basicFetch(url);\n  }\n\n  async getSearchMoviesCredits(id) {\n    const url = `movie/${id}/credits`;\n\n    return await this.basicFetch(url);\n  }\n\n  async getSearchMoviesReview(id) {\n    const url = `movie/${id}/reviews`;\n\n    return await this.basicFetch(url);\n  }\n\n  async getMoviesByKeyWord() {\n    const url = 'search/movie';\n\n    return await this.basicFetch(url, 'query');\n\n    // const params = new URLSearchParams({\n    //   api_key: this.API_KEY,\n\n    //   query: this._queryToFetch,\n    //   page: this.pageToFetch,\n    // });\n\n    // const url = `${this.BASE_URL}search/movie?${params.toString()}`;\n\n    // return await this.basicFetch(url);\n  }\n\n  get queryToFetch() {\n    return this._queryToFetch;\n  }\n\n  set queryToFetch(keyword) {\n    this._queryToFetch = keyword;\n  }\n}\n\nconst api = new API();\n\nexport default api;\n","import styled from 'styled-components';\n\nconst Discription = styled.p`\n  text-align: center;\n  font-size: 28px;\n  font-weight: 700;\n`;\n\nexport { Discription };\n","import { Discription } from './Message.styled';\n\nconst NotFoundPage = ({ text }) => {\n  return <Discription>{text}</Discription>;\n};\n\nexport default NotFoundPage;\n","import styled from 'styled-components';\n\nconst ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nconst ReviewsItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  border: 1px solid #2e2e2e70;\n  border-radius: 10px;\n  padding-bottom: 8px;\n  overflow: hidden;\n\n  & div {\n    display: inherit;\n    gap: 8px;\n    align-items: end;\n  }\n\n  & img {\n    display: block;\n    max-width: 150px;\n    max-height: 100px;\n    object-fit: contain;\n  }\n\n  & h3 {\n    border-bottom: 2px solid #2e2e2e70;\n  }\n\n  & p {\n    font-size: 16px;\n    padding: 0 8px;\n    font-weight: 700;\n\n    & span {\n      display: block;\n      font-size: 16px;\n      font-weight: 400;\n    }\n  }\n`;\n\nexport { ReviewsItem, ReviewsList };\n","import { ReviewsItem, ReviewsList } from './Reviews.styled';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from 'API/API';\nimport Message from 'components/Message';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getReviews = async () => {\n      const { data } = await api.getSearchMoviesReview(movieId);\n      console.log('reviewsList', data);\n\n      setReviews(\n        data.results.map(\n          ({ id, author, author_details: { avatar_path }, content }) => ({\n            id,\n            author,\n            content,\n            avatar:\n              avatar_path && !avatar_path.includes('http')\n                ? `https://image.tmdb.org/t/p/original${avatar_path}`\n                : 'https://st2.depositphotos.com/1009634/7235/v/950/depositphotos_72350117-stock-illustration-no-user-profile-picture-hand.jpg',\n          })\n        )\n      );\n    };\n\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {!!reviews.length ? (\n        <ReviewsList>\n          {reviews.map(({ id, author, content, avatar }) => (\n            <ReviewsItem key={id}>\n              <div>\n                <img src={avatar} alt={author} />\n                <h3>Author: {author}</h3>\n              </div>\n              <p>\n                Review: <span>{content}</span>\n              </p>\n            </ReviewsItem>\n          ))}\n        </ReviewsList>\n      ) : (\n        <Message text=\"There are no reviews\" />\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["API","this","_queryToFetch","BASE_URL","API_KEY","url","query","axios","baseURL","params","api_key","queryToFetch","basicFetch","id","keyword","api","Discription","styled","text","ReviewsList","ReviewsItem","useState","reviews","setReviews","movieId","useParams","useEffect","getReviews","data","console","log","results","map","author","avatar_path","author_details","content","avatar","includes","length","src","alt","Message"],"sourceRoot":""}